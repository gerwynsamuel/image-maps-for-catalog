<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_pisn_imagemap.Canvas</name>
        <script><![CDATA[class Canvas {

    constructor(elem, data, g_form) {

        this.data = data;
        this.elem = elem;
        this.g_form = g_form;

        this.shapes = [];

        this.max = {
            height: 400,
            width: 400
        };

        this.maxPoints = {
        	x: 5000,
        	y: 5000
        }

        this.original = {
            height: null,
            width: null
        };

        this.actual = {
            height: null,
            width: null
        };

        this.ratio = {
            height: null,
            width: null
        };

        this.scale = null;

        this.canvas = null;
        this.image = null;


        this.image = new Image();
        this.image.name = this.data.image;

        var self = this;

        this.image.onload = function() {
            self.initCanvas(this.width, this.height);
        };

        this.image.src = this.data.image;

    }

    initCanvas(width, height) {

    	var self = this;

        this.original.width = width;
        this.original.height = height;

        this.ratio.height = 100 / this.max.height * this.original.height;
        this.ratio.width = 100 / this.max.width * this.original.width;

        this.scale = this.ratio.height > this.ratio.width ? 100 / this.ratio.height : 100 / this.ratio.width;

        this.actual.height = this.original.height * this.scale;
        this.actual.width = this.original.width * this.scale;

        this.canvas = new fabric.Canvas(this.elem.attr('id'));
        this.canvas.setHeight(this.actual.height);
        this.canvas.setWidth(this.actual.width);

        var imgInstance = new fabric.Image(this.image, {
            left: 0,
            top: 0,
            scaleX: this.scale,
            scaleY: this.scale,
            lockMovementX: true,
            lockMovementY: true,
            lockScalingX: true,
            lockScalingY: true,
            lockRotation: true,
            selectable: false,
            hoverCursor: 'default',
            hasBorders: false,
            hasControls: false
        });

        imgInstance.setControlsVisibility({
            mt: false,
            mb: false,
            ml: false,
            mr: false,
            bl: false,
            br: false,
            tl: false,
            tr: false,
            mtr: false
        });

        this.canvas.add(imgInstance);
		
		if (this.data.mode === 'choice') {
			this.g_form.setVisible(this.data.vbl, false);
		}

        this.data.areas.forEach(function(area) {
			
            var selected = false;

            if (this.data.mode === 'checkbox') {
                if (this.g_form.getValue(area.value) === 'true') {
                    selected = true;
                }
				
				this.g_form.setVisible(area.value, false);
				
            } else {

                if (area.value === this.g_form.getValue(this.data.vbl)) {
                    selected = true;
                }
            }

            if (area.shape === 'poly') {

                var myRe = /(\\,|[^,])+,(\\,|[^,])+/g;
                var myArray = area.coordinates.match(myRe);

                var points = myArray.map(polyPoint, this);

                var polygon = new fabric.Polygon(points, {
                    left: this.max.x,
                    top: this.max.y,
                    opacity: selected ? 1 : 0,
                    lockMovementX: true,
                    lockMovementY: true,
                    lockScalingX: true,
                    lockScalingY: true,
                    lockRotation: true,
                    hoverCursor: 'pointer',
                    hasBorders: false,
                    hasControls: false,
                    selected: selected,
                    id: area.value,
                    fill: this.data.colors.fill,
                    strokeWidth: 1,
                    stroke: this.data.colors.stroke
                });

                this.canvas.add(polygon);
                this.shapes.push(polygon);
            }

        }, this);

        function polyPoint(elem, index, array) {

            var points = elem.split(',');

            if (this.maxPoints.x > points[0]) {
                this.maxPoints.x = parseInt(points[0]);
            }

            if (this.maxPoints.y > points[1]) {
                this.maxPoints.y = parseInt(points[1]);
            }

            return {
                x: parseInt(points[0] * this.scale),
                y: parseInt(points[1] * this.scale)
            };
        }

        this.canvas.on('mouse:down', function(e) {
            var targetId = e.target.get('id');

            if (self.data.mode === 'choice') {

                self.g_form.setValue(self.data.vbl, targetId);
                e.target.selected = true;

                self.shapes.forEach(function(shape) {

                    if (shape.get('id') !== targetId) {
                        shape.set("selected", false);
                    }

                    shape.set("opacity", shape.get('selected') ? 1 : 0);
                });

            } else {
				
                e.target.selected = !e.target.selected;
                self.g_form.setValue(targetId, e.target.selected.toString());

                self.shapes.forEach(function(shape) {
                    shape.set("opacity", shape.get('selected') ? 1 : 0);
                });
				
            }

            self.canvas.renderAll();
        });

        this.canvas.on('mouse:over', function(e) {
            e.target.set('fill', self.data.colors.fill_hover);
            e.target.set('stroke', self.data.colors.stroke_hover);
            self.canvas.renderAll();
        });

        this.canvas.on('mouse:out', function(e) {
            e.target.set('fill', self.data.colors.fill);
            e.target.set('stroke', self.data.colors.stroke);
            self.canvas.renderAll();
        });

    }

}]]></script>
        <script_name>Canvas</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>dylan.lindgren</sys_created_by>
        <sys_created_on>2018-01-28 02:09:41</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e933e32bdbff83008cfb70f08c96195d</sys_id>
        <sys_mod_count>90</sys_mod_count>
        <sys_name>x_pisn_imagemap.Canvas</sys_name>
        <sys_package display_value="Image Map for Catalog Items" source="x_pisn_imagemap">fe4bf50adb3303008cfb70f08c9619df</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Image Map for Catalog Items">fe4bf50adb3303008cfb70f08c9619df</sys_scope>
        <sys_update_name>sys_ui_script_e933e32bdbff83008cfb70f08c96195d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-01-30 00:03:42</sys_updated_on>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
